from django.core.management.base import BaseCommand
from core.models import Guardian, Vote, SessionGuardian, VotingSession, ReportQueue


class Command(BaseCommand):
    help = 'Limpa todos os Guardi√µes cadastrados e dados relacionados'

    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='Confirma a exclus√£o de todos os dados',
        )

    def handle(self, *args, **options):
        if not options['confirm']:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è ATEN√á√ÉO: Este comando ir√° deletar TODOS os Guardi√µes e dados relacionados!')
            )
            self.stdout.write('Para confirmar, execute: python manage.py clear_all_guardians --confirm')
            return

        self.stdout.write('üóëÔ∏è Iniciando limpeza completa dos Guardi√µes...')
        
        # Contar registros antes da limpeza
        guardians_count = Guardian.objects.count()
        votes_count = Vote.objects.count()
        session_guardians_count = SessionGuardian.objects.count()
        voting_sessions_count = VotingSession.objects.count()
        report_queues_count = ReportQueue.objects.count()
        
        self.stdout.write(f'üìä Registros encontrados:')
        self.stdout.write(f'   - Guardi√µes: {guardians_count}')
        self.stdout.write(f'   - Votos: {votes_count}')
        self.stdout.write(f'   - Sess√µes de Guardi√µes: {session_guardians_count}')
        self.stdout.write(f'   - Sess√µes de Vota√ß√£o: {voting_sessions_count}')
        self.stdout.write(f'   - Filas de Den√∫ncias: {report_queues_count}')
        
        if guardians_count == 0:
            self.stdout.write('‚úÖ Nenhum Guardi√£o encontrado para deletar')
            return
        
        # Deletar dados relacionados primeiro (para evitar problemas de foreign key)
        self.stdout.write('üóëÔ∏è Deletando dados relacionados...')
        
        # Deletar votos
        Vote.objects.all().delete()
        self.stdout.write('   ‚úÖ Votos deletados')
        
        # Deletar sess√µes de guardi√µes
        SessionGuardian.objects.all().delete()
        self.stdout.write('   ‚úÖ Sess√µes de Guardi√µes deletadas')
        
        # Deletar sess√µes de vota√ß√£o
        VotingSession.objects.all().delete()
        self.stdout.write('   ‚úÖ Sess√µes de Vota√ß√£o deletadas')
        
        # Deletar filas de den√∫ncias
        ReportQueue.objects.all().delete()
        self.stdout.write('   ‚úÖ Filas de Den√∫ncias deletadas')
        
        # Deletar guardi√µes
        Guardian.objects.all().delete()
        self.stdout.write('   ‚úÖ Guardi√µes deletados')
        
        # Verificar se tudo foi deletado
        remaining_guardians = Guardian.objects.count()
        remaining_votes = Vote.objects.count()
        remaining_sessions = VotingSession.objects.count()
        
        if remaining_guardians == 0 and remaining_votes == 0 and remaining_sessions == 0:
            self.stdout.write(
                self.style.SUCCESS('üéâ Limpeza conclu√≠da com sucesso!')
            )
            self.stdout.write('‚úÖ Todos os Guardi√µes e dados relacionados foram removidos')
            self.stdout.write('üí° Agora voc√™ pode fazer login novamente para criar um novo perfil')
        else:
            self.stdout.write(
                self.style.ERROR('‚ùå Erro na limpeza! Alguns registros ainda existem')
            )
            self.stdout.write(f'   - Guardi√µes restantes: {remaining_guardians}')
            self.stdout.write(f'   - Votos restantes: {remaining_votes}')
            self.stdout.write(f'   - Sess√µes restantes: {remaining_sessions}')
