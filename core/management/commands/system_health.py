"""
Comando para verificar a sa√∫de do Sistema Guardi√£o
"""
from django.core.management.base import BaseCommand
from django.db import connection
from django.utils import timezone
from core.models import Guardian, Report, ReportQueue, VotingSession, SessionGuardian


class Command(BaseCommand):
    help = 'Verifica a sa√∫de do Sistema Guardi√£o'

    def handle(self, *args, **options):
        self.stdout.write('üîç Verificando sa√∫de do Sistema Guardi√£o...\n')
        
        # Verificar conex√£o com banco de dados
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            self.stdout.write(self.style.SUCCESS('‚úÖ Conex√£o com banco de dados: OK'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro na conex√£o com banco: {e}'))
            return
        
        # Verificar modelos principais
        try:
            total_guardians = Guardian.objects.count()
            total_reports = Report.objects.count()
            total_queue_items = ReportQueue.objects.count()
            total_sessions = VotingSession.objects.count()
            
            self.stdout.write(f'üìä Estat√≠sticas do Sistema:')
            self.stdout.write(f'   ‚Ä¢ Guardi√µes: {total_guardians}')
            self.stdout.write(f'   ‚Ä¢ Den√∫ncias: {total_reports}')
            self.stdout.write(f'   ‚Ä¢ Itens na Fila: {total_queue_items}')
            self.stdout.write(f'   ‚Ä¢ Sess√µes de Vota√ß√£o: {total_sessions}')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao consultar modelos: {e}'))
            return
        
        # Verificar Guardi√µes online
        try:
            online_guardians = Guardian.objects.filter(status='online').count()
            offline_guardians = Guardian.objects.filter(status='offline').count()
            
            self.stdout.write(f'\nüë• Status dos Guardi√µes:')
            self.stdout.write(f'   ‚Ä¢ Online: {online_guardians}')
            self.stdout.write(f'   ‚Ä¢ Offline: {offline_guardians}')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar status dos Guardi√µes: {e}'))
        
        # Verificar den√∫ncias por status
        try:
            pending_reports = Report.objects.filter(status='pending').count()
            voting_reports = Report.objects.filter(status='voting').count()
            completed_reports = Report.objects.filter(status='completed').count()
            
            self.stdout.write(f'\nüìã Status das Den√∫ncias:')
            self.stdout.write(f'   ‚Ä¢ Pendentes: {pending_reports}')
            self.stdout.write(f'   ‚Ä¢ Em Vota√ß√£o: {voting_reports}')
            self.stdout.write(f'   ‚Ä¢ Conclu√≠das: {completed_reports}')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar status das den√∫ncias: {e}'))
        
        # Verificar sess√µes ativas
        try:
            active_sessions = VotingSession.objects.filter(status='voting').count()
            waiting_sessions = VotingSession.objects.filter(status='waiting').count()
            completed_sessions = VotingSession.objects.filter(status='completed').count()
            
            self.stdout.write(f'\nüó≥Ô∏è Status das Sess√µes:')
            self.stdout.write(f'   ‚Ä¢ Aguardando: {waiting_sessions}')
            self.stdout.write(f'   ‚Ä¢ Em Vota√ß√£o: {active_sessions}')
            self.stdout.write(f'   ‚Ä¢ Conclu√≠das: {completed_sessions}')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar sess√µes: {e}'))
        
        # Verificar problemas potenciais
        self.stdout.write(f'\nüîß Verifica√ß√µes de Integridade:')
        
        # Verificar den√∫ncias √≥rf√£s (sem fila)
        try:
            reports_without_queue = Report.objects.exclude(
                reportqueue__isnull=False
            ).count()
            
            if reports_without_queue > 0:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è {reports_without_queue} den√∫ncias sem entrada na fila')
                )
            else:
                self.stdout.write('‚úÖ Todas as den√∫ncias t√™m entrada na fila')
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar fila: {e}'))
        
        # Verificar sess√µes √≥rf√£s (sem Guardi√µes)
        try:
            sessions_without_guardians = VotingSession.objects.exclude(
                sessionguardian__isnull=False
            ).count()
            
            if sessions_without_guardians > 0:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è {sessions_without_guardians} sess√µes sem Guardi√µes')
                )
            else:
                self.stdout.write('‚úÖ Todas as sess√µes t√™m Guardi√µes associados')
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar sess√µes: {e}'))
        
        # Verificar Guardi√µes com discord_id duplicado
        try:
            from django.db.models import Count
            duplicate_guardians = Guardian.objects.values('discord_id').annotate(
                count=Count('discord_id')
            ).filter(count__gt=1)
            
            if duplicate_guardians.exists():
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è {duplicate_guardians.count()} discord_ids duplicados')
                )
            else:
                self.stdout.write('‚úÖ Nenhum discord_id duplicado')
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao verificar duplicatas: {e}'))
        
        self.stdout.write(
            self.style.SUCCESS('\nüéâ Verifica√ß√£o de sa√∫de conclu√≠da!')
        )
