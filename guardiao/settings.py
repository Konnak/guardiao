"""
Django settings for guardiao project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-hu&^q0#686_bn$oe_x-x1c28g%_*(419&95kt*c%o5her&m!u6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Debug Django configuration
print("=== DJANGO CONFIGURATION DEBUG ===")
print(f"SECRET_KEY: {'SET' if os.getenv('SECRET_KEY') else 'NOT SET'}")
print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
print("===================================")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "core",
    "bot",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "guardiao.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "guardiao.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Debug database configuration
print("=== DATABASE CONFIGURATION DEBUG ===")
print(f"DB_NAME: {os.getenv('DB_NAME', 'guardiaodatabase')}")
print(f"DB_USER: {os.getenv('DB_USER', 'guardiao')}")
print(f"DB_PASSWORD: {'*' * len(os.getenv('DB_PASSWORD', 'PasswordGuardiaoAdmin2025!'))}")
print(f"DB_HOST: {os.getenv('DB_HOST', 'postgresql')}")
print(f"DB_PORT: {os.getenv('DB_PORT', '5432')}")
print("=====================================")

# Try to connect to PostgreSQL, fallback to SQLite if not available
try:
    import psycopg2
    # Test connection
    conn = psycopg2.connect(
        host=os.getenv('DB_HOST', 'postgresql'),
        port=os.getenv('DB_PORT', '5432'),
        user=os.getenv('DB_USER', 'guardiao'),
        password=os.getenv('DB_PASSWORD', 'PasswordGuardiaoAdmin2025!'),
        database=os.getenv('DB_NAME', 'guardiaodatabase')
    )
    conn.close()
    print("‚úÖ PostgreSQL connection successful!")
    
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv('DB_NAME', 'guardiaodatabase'),
            "USER": os.getenv('DB_USER', 'guardiao'),
            "PASSWORD": os.getenv('DB_PASSWORD', 'PasswordGuardiaoAdmin2025!'),
            "HOST": os.getenv('DB_HOST', 'postgresql'),
            "PORT": os.getenv('DB_PORT', '5432'),
        }
    }
except Exception as e:
    print(f"‚ùå PostgreSQL connection failed: {e}")
    print("üîÑ Falling back to SQLite for development...")
    
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Discord Configuration
DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
DISCORD_CLIENT_ID = os.getenv('DISCORD_CLIENT_ID')
DISCORD_CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET')

# Site Configuration
SITE_URL = os.getenv('SITE_URL', 'http://localhost:8080')

# Debug Discord configuration
print("=== DISCORD CONFIGURATION DEBUG ===")
print(f"DISCORD_BOT_TOKEN: {'SET' if DISCORD_BOT_TOKEN else 'NOT SET'}")
print(f"DISCORD_CLIENT_ID: {'SET' if DISCORD_CLIENT_ID else 'NOT SET'}")
print(f"DISCORD_CLIENT_SECRET: {'SET' if DISCORD_CLIENT_SECRET else 'NOT SET'}")
print(f"SITE_URL: {SITE_URL}")
print("====================================")

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = True  # Apenas para desenvolvimento
CORS_ALLOW_CREDENTIALS = True

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}
